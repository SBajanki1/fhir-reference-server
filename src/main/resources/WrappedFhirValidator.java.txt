/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.warlock.tk.internalservices.validation;
import java.io.InputStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.net.URL;
import java.util.ArrayList;
import org.hl7.fhir.dstu2.model.OperationOutcome;
import org.hl7.fhir.dstu2.utils.ResourceUtilities;
import org.hl7.fhir.dstu2.validation.ValidationEngine;
import org.warlock.tk.internalservices.validation.spine.SpineMessage;

/**
 *
 * Configured via:
 * CHECK fhir path_to_profile [url_of_terminology_service]
 * 
 * If not using a profile, explicitly state so with "NO_PROFILE" 
 * 
 * @author damian
 */
public class WrappedFhirValidator 
    implements ValidationCheck
{    
    // type will be "fhir"
    // resource will be a profile file name or NO_PROFILE
    // data if present will be the the URL of a terminology service
    
    protected static final String VALIDATORDEFINITIONS = "validation.xml.zip";
    protected static final int DEFINITIONSBUFFER = 2048000;
    protected static final String DEFAULT_FHIR_TERMINOLOGY_SERVER = "http://fhir2.healthintersections.com.au/open";
    
    protected String type = null;
    protected String profile = null;
    protected String txUrl = null;
    
    protected static ValidationEngine engine = null;
    
    @Override
    public synchronized void initialise() throws Exception {
        if (engine != null)
            return;
        engine = new ValidationEngine();
        loadDefinitions();
        engine.connectToTSServer(txUrl == null ? DEFAULT_FHIR_TERMINOLOGY_SERVER : txUrl);
        if (profile != null)
            engine.loadProfile(profile);
    }

    private void loadDefinitions() throws Exception {
        byte[] buffer = new byte[DEFINITIONSBUFFER];
        
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        BufferedInputStream bis = new BufferedInputStream(getClass().getResourceAsStream(VALIDATORDEFINITIONS));
        int r = -1;
        while ((r = bis.read(buffer, 0, DEFINITIONSBUFFER)) != -1) {
            os.write(buffer, 0, r);
        }
        engine.readDefinitions(os.toByteArray());
    }
    
    @Override
    public void setType(String t) { type = t; }
    
    @Override
    public void setResource(String r) 
    {
        if ((r == null) || (r.trim().length() == 0))
            return;
        if (r.contentEquals("NO_PROFILE"))
            return;
        
        // Note: We probably want to check at this point if the given profile file
        // exists. However since setResource() is void and the interface doesn't
        // throw anything, there is no way to signal when we're not happy with the
        // file. So leave it for the validator to complain.
        
        profile = r;
    }
    
    @Override
    public void setData(String d) 
            throws Exception 
    {
        if ((d == null) || (d.trim().length() == 0))
            return;
        URL u = new URL(d);
        txUrl = d;
    }
    
    @Override
    public ValidatorOutput validate(String o, boolean stripHeader) 
            throws Exception 
    {
        engine.reset();
        engine.setSource(o.getBytes());
        if (o.trim().startsWith("{"))
            engine.processJson();
        else
            engine.processXml();
        
        StringBuilder sb = new StringBuilder("HL7 FHIR DSTU2 validation using profile ");
        sb.append((profile == null) ? "(no profile given)" : profile);
        sb.append("\r\n");
        OperationOutcome outcome = engine.getOutcome();
        boolean overallpass = true;
        if (outcome != null) {
            ArrayList<ValidationReport> valreps = new ArrayList<>();
            for (OperationOutcome.OperationOutcomeIssueComponent ooic : outcome.getIssue()) {
                boolean pass = true;
                ValidationReport v = new ValidationReport(ooic.getDetails().getText());
                if (ooic.getSeverity() == OperationOutcome.IssueSeverity.ERROR)
                    pass = false;
                else if (ooic.getSeverity() == OperationOutcome.IssueSeverity.FATAL)
                    pass = false;
                else if (ooic.getSeverity() == OperationOutcome.IssueSeverity.WARNING)
                    pass = false;
                else if (ooic.getSeverity() == OperationOutcome.IssueSeverity.INFORMATION)
                    pass = true;
                else
                    pass = true;
                if (pass) {
                    v.setPassed();
                } else {
                    overallpass = false;
                }
                valreps.add(v);
            }
            ValidationReport[] report = new ValidationReport[valreps.size()];
            valreps.toArray(report);
            if (overallpass)
                sb.append(" : PASS");
            else
                sb.append(" : FAIL");
            return new ValidatorOutput(sb.toString(), report);
        }
        sb.append(" : NO REPORT");
        return new ValidatorOutput(sb.toString(), null); 
    }
    
    @Override
    public ValidationReport[] validate(SpineMessage o) throws Exception 
    { 
        throw new Exception("FHIR validation of Spine message payload. Incorrect validation type used.");
    }
    
    @Override
    public String getSupportingData() { return null; }
    
    @Override
    public void writeExternalOutput(String reportDirectory) throws Exception {}
    
    @Override
    public void setVariableProvider(VariableProvider vp)    {}
}
